# -*- coding: utf-8 -*-
"""MidTermProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/159Co8czevtg10X3BOb0fljJ0hhZK2zjT

# Mid Term Project

## Travelling Merchant Problem

### Harvensine Formula to find de distance between 2 points using latitude and longitude
"""

import math
import time
import folium
import pandas as pd
from folium import plugins

url="https://raw.githubusercontent.com/lmcanavals/algorithmic_complexity/main/data/poblaciones.csv"

poblacionesDF = pd.read_csv(url)

def createMap():
  m = folium.Map(location=[-9.1951786,-74.9904165], zoom_start=8)
  plugins.ScrollZoomToggler().add_to(m)
  plugins.MeasureControl(position = 'topleft').add_to(m)
  return m

def extractData(dataset):
  lst = []
  for i in range(len(dataset)):
    lst.append((dataset[i][3],dataset[i][4], dataset[i][5]))
  return lst

def set_line(map, points):
  folium.PolyLine(points, color='cyan').add_to(map)

def make_route(map, relations, lats, longs, n):
  points = []
  next = -1
  for i in range(n):
  #for i in range(len(relations)):
    points.append([float(lats[i]),float(longs[i])])
    next = relations[i][0]
    points.append([float(lats[next]),float(longs[next])])
    set_line(m, points)
    points = []


def set_markers(map, names, lats, longs, start, n):
  for i in range(n):
    if i == start:
      folium.Marker([float(lats[i]),float(longs[i])],popup=names[i], icon = folium.Icon(color='red', icon='home')).add_to(map)  
    else:
      if i == 754 or i == 848:
        print('fuck you')
      else:
        folium.Marker([float(lats[i]),float(longs[i])],popup=names[i]).add_to(map)  

def distance (lat1, lon1, lat2, lon2):
  p = math.pi/180
  a = 0.5 - math.cos((lat2 - lat1) * p)/2 + math.cos(lat1*p) * math.cos(lat2 * p) * (1-math.cos((lon2-lon1)*p))/2
  return 12742 * math.asin(math.sqrt(a)) 

def total_distance(relations, n):
  total = 0
  for i in range(n):
    total += relations[i][1]
  return total

def convertData(data, columType, value):
  return data[data[columType.upper()] == value.upper()]

def ts(data, start, n): 
  #Listas para usar solo los centros poblados, lat
  populationsList = data['CENTRO POBLADO']
  latitudeList = data['LATITUD']
  longitudeList = data['LONGITUD']

  set_markers(m, populationsList, latitudeList, longitudeList, start, n) #Ubicamos los marcadores de cada centro poblado en el mapa

  relations = [(-1,math.inf) for i in range(len(data))]  #Lista de relationes. (x,y) donde x es el nodo de destino / y es la distancia
  visited = [False for i in range(len(data))] #Lista de nodos visitados

  queue = []
  points = []
  ele = -1
  queue.append(start)
  while(len(queue) > 0):
    ele = queue[-1]
    del queue[-1]
    for i in range(n):
      if visited[i] == False and i != ele and i != 754 and ele != 754 and i != 848 and ele != 848:
        lenght = distance(float(latitudeList[ele]), float(longitudeList[ele]), float(latitudeList[i]), float(longitudeList[i]))
        if lenght < relations[ele][1]:
          relations[ele] = (i,lenght)
          if queue:
              del queue[-1]
          queue.append(relations[ele][0])
    visited[ele] = True
  lenght = distance(float(latitudeList[ele]), float(longitudeList[ele]), float(latitudeList[start]), float(longitudeList[start]))
  relations[ele] = (start,lenght)
  make_route(m, relations, latitudeList, longitudeList, n)
  return relations

pobType = input("Enter poblation type")
value = input("Enter value")
pobData = convertData(poblacionesDF, pobType, value)
if len(pobData) <= 0:
  print("No data found with " + pobType + " type and " + value + " row value.") 
  exit()
s = input("Enter initial node (0 - " + str(len(pobData) - 1) + '): ')
m = createMap()
array = ts(pobData, int(s), len(pobData))
print(str(total_distance(array, len(pobData))) + " Km")

m